### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  nei: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type City {
  createdAt: DateTime
  name: String
  publishedAt: DateTime
  state: StateEntityResponse
  updatedAt: DateTime
}

type CityEntity {
  attributes: City
  id: ID
}

type CityEntityResponse {
  data: CityEntity
}

type CityEntityResponseCollection {
  data: [CityEntity!]!
  meta: ResponseCollectionMeta!
}

input CityFiltersInput {
  and: [CityFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: CityFiltersInput
  or: [CityFiltersInput]
  publishedAt: DateTimeFilterInput
  state: StateFiltersInput
  updatedAt: DateTimeFilterInput
}

input CityInput {
  name: String
  publishedAt: DateTime
  state: ID
}

type CityRelationResponseCollection {
  data: [CityEntity!]!
}

type College {
  approvedBy(filters: OrganizationFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): OrganizationRelationResponseCollection
  banner(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  brochure: UploadFileEntityResponse
  city: CityEntityResponse
  collegeDescription: String
  collegeLogo: UploadFileEntityResponse!
  collegeName: String!
  collegeStreams(filters: StreamFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StreamRelationResponseCollection
  college_type: CollegeTypeEntityResponse
  country: CountryEntityResponse
  courses(filters: CourseFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CourseRelationResponseCollection
  createdAt: DateTime
  establishmentYear: String
  isTopCollege: Boolean
  navbars(filters: NavbarFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NavbarRelationResponseCollection
  news(filters: NewFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NewRelationResponseCollection
  pageData: [CollegePageDataDynamicZone]
  pincode: String!
  publishedAt: DateTime
  rankedBy(filters: RankingBodyFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): RankingBodyRelationResponseCollection
  state: StateEntityResponse
  updatedAt: DateTime
  url: String
}

type CollegeEntity {
  attributes: College
  id: ID
}

type CollegeEntityResponse {
  data: CollegeEntity
}

type CollegeEntityResponseCollection {
  data: [CollegeEntity!]!
  meta: ResponseCollectionMeta!
}

input CollegeFiltersInput {
  and: [CollegeFiltersInput]
  approvedBy: OrganizationFiltersInput
  city: CityFiltersInput
  collegeDescription: StringFilterInput
  collegeName: StringFilterInput
  collegeStreams: StreamFiltersInput
  college_type: CollegeTypeFiltersInput
  country: CountryFiltersInput
  courses: CourseFiltersInput
  createdAt: DateTimeFilterInput
  establishmentYear: StringFilterInput
  id: IDFilterInput
  isTopCollege: BooleanFilterInput
  navbars: NavbarFiltersInput
  news: NewFiltersInput
  not: CollegeFiltersInput
  or: [CollegeFiltersInput]
  pincode: StringFilterInput
  publishedAt: DateTimeFilterInput
  rankedBy: RankingBodyFiltersInput
  state: StateFiltersInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
}

input CollegeInput {
  approvedBy: [ID]
  banner: [ID]
  brochure: ID
  city: ID
  collegeDescription: String
  collegeLogo: ID
  collegeName: String
  collegeStreams: [ID]
  college_type: ID
  country: ID
  courses: [ID]
  establishmentYear: String
  isTopCollege: Boolean
  navbars: [ID]
  news: [ID]
  pageData: [CollegePageDataDynamicZoneInput!]
  pincode: String
  publishedAt: DateTime
  rankedBy: [ID]
  state: ID
  url: String
}

union CollegePageDataDynamicZone = ComponentCommonFaqS | ComponentCommonGallery | ComponentCommonTabData | Error

scalar CollegePageDataDynamicZoneInput

type CollegeRelationResponseCollection {
  data: [CollegeEntity!]!
}

type CollegeType {
  course: CourseEntityResponse
  createdAt: DateTime
  publishedAt: DateTime
  type: String
  updatedAt: DateTime
}

type CollegeTypeEntity {
  attributes: CollegeType
  id: ID
}

type CollegeTypeEntityResponse {
  data: CollegeTypeEntity
}

type CollegeTypeEntityResponseCollection {
  data: [CollegeTypeEntity!]!
  meta: ResponseCollectionMeta!
}

input CollegeTypeFiltersInput {
  and: [CollegeTypeFiltersInput]
  course: CourseFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: CollegeTypeFiltersInput
  or: [CollegeTypeFiltersInput]
  publishedAt: DateTimeFilterInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input CollegeTypeInput {
  course: ID
  publishedAt: DateTime
  type: String
}

type CollegeTypeRelationResponseCollection {
  data: [CollegeTypeEntity!]!
}

type ComponentCommonApplicationDate {
  endDate: Date
  id: ID!
  startDate: Date
}

input ComponentCommonApplicationDateFiltersInput {
  and: [ComponentCommonApplicationDateFiltersInput]
  endDate: DateFilterInput
  not: ComponentCommonApplicationDateFiltersInput
  or: [ComponentCommonApplicationDateFiltersInput]
  startDate: DateFilterInput
}

input ComponentCommonApplicationDateInput {
  endDate: Date
  id: ID
  startDate: Date
}

type ComponentCommonDates {
  endDate: Date
  id: ID!
  startDate: Date
}

input ComponentCommonDatesFiltersInput {
  and: [ComponentCommonDatesFiltersInput]
  endDate: DateFilterInput
  not: ComponentCommonDatesFiltersInput
  or: [ComponentCommonDatesFiltersInput]
  startDate: DateFilterInput
}

input ComponentCommonDatesInput {
  endDate: Date
  id: ID
  startDate: Date
}

type ComponentCommonFaqS {
  Answer: String
  Question: String
  id: ID!
  navbar: NavbarEntityResponse
}

input ComponentCommonFaqSFiltersInput {
  Answer: StringFilterInput
  Question: StringFilterInput
  and: [ComponentCommonFaqSFiltersInput]
  navbar: NavbarFiltersInput
  not: ComponentCommonFaqSFiltersInput
  or: [ComponentCommonFaqSFiltersInput]
}

input ComponentCommonFaqSInput {
  Answer: String
  Question: String
  id: ID
  navbar: ID
}

type ComponentCommonGallery {
  heading: String!
  id: ID!
  navbar: NavbarEntityResponse
  pageGallery(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
}

input ComponentCommonGalleryFiltersInput {
  and: [ComponentCommonGalleryFiltersInput]
  heading: StringFilterInput
  navbar: NavbarFiltersInput
  not: ComponentCommonGalleryFiltersInput
  or: [ComponentCommonGalleryFiltersInput]
}

input ComponentCommonGalleryInput {
  heading: String
  id: ID
  navbar: ID
  pageGallery: [ID]
}

type ComponentCommonResultDate {
  endDate: Date
  id: ID!
  startDate: Date
}

input ComponentCommonResultDateFiltersInput {
  and: [ComponentCommonResultDateFiltersInput]
  endDate: DateFilterInput
  not: ComponentCommonResultDateFiltersInput
  or: [ComponentCommonResultDateFiltersInput]
  startDate: DateFilterInput
}

input ComponentCommonResultDateInput {
  endDate: Date
  id: ID
  startDate: Date
}

type ComponentCommonTabData {
  content: String
  heading: String!
  id: ID!
  navbar: NavbarEntityResponse
}

input ComponentCommonTabDataFiltersInput {
  and: [ComponentCommonTabDataFiltersInput]
  content: StringFilterInput
  heading: StringFilterInput
  navbar: NavbarFiltersInput
  not: ComponentCommonTabDataFiltersInput
  or: [ComponentCommonTabDataFiltersInput]
}

input ComponentCommonTabDataInput {
  content: String
  heading: String
  id: ID
  navbar: ID
}

type ContentReleasesRelease {
  actions(filters: ContentReleasesReleaseActionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ContentReleasesReleaseActionRelationResponseCollection
  createdAt: DateTime
  name: String!
  releasedAt: DateTime
  updatedAt: DateTime
}

type ContentReleasesReleaseAction {
  contentType: String!
  createdAt: DateTime
  entry: GenericMorph
  locale: String
  release: ContentReleasesReleaseEntityResponse
  type: ENUM_CONTENTRELEASESRELEASEACTION_TYPE!
  updatedAt: DateTime
}

type ContentReleasesReleaseActionEntity {
  attributes: ContentReleasesReleaseAction
  id: ID
}

type ContentReleasesReleaseActionEntityResponse {
  data: ContentReleasesReleaseActionEntity
}

type ContentReleasesReleaseActionEntityResponseCollection {
  data: [ContentReleasesReleaseActionEntity!]!
  meta: ResponseCollectionMeta!
}

input ContentReleasesReleaseActionFiltersInput {
  and: [ContentReleasesReleaseActionFiltersInput]
  contentType: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  not: ContentReleasesReleaseActionFiltersInput
  or: [ContentReleasesReleaseActionFiltersInput]
  release: ContentReleasesReleaseFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ContentReleasesReleaseActionInput {
  contentType: String
  locale: String
  release: ID
  type: ENUM_CONTENTRELEASESRELEASEACTION_TYPE
}

type ContentReleasesReleaseActionRelationResponseCollection {
  data: [ContentReleasesReleaseActionEntity!]!
}

type ContentReleasesReleaseEntity {
  attributes: ContentReleasesRelease
  id: ID
}

type ContentReleasesReleaseEntityResponse {
  data: ContentReleasesReleaseEntity
}

type ContentReleasesReleaseEntityResponseCollection {
  data: [ContentReleasesReleaseEntity!]!
  meta: ResponseCollectionMeta!
}

input ContentReleasesReleaseFiltersInput {
  actions: ContentReleasesReleaseActionFiltersInput
  and: [ContentReleasesReleaseFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: ContentReleasesReleaseFiltersInput
  or: [ContentReleasesReleaseFiltersInput]
  releasedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input ContentReleasesReleaseInput {
  actions: [ID]
  name: String
  releasedAt: DateTime
}

type ContentReleasesReleaseRelationResponseCollection {
  data: [ContentReleasesReleaseEntity!]!
}

type Country {
  colleges(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  createdAt: DateTime
  name: String
  publishedAt: DateTime
  states(filters: StateFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StateRelationResponseCollection
  updatedAt: DateTime
}

type CountryEntity {
  attributes: Country
  id: ID
}

type CountryEntityResponse {
  data: CountryEntity
}

type CountryEntityResponseCollection {
  data: [CountryEntity!]!
  meta: ResponseCollectionMeta!
}

input CountryFiltersInput {
  and: [CountryFiltersInput]
  colleges: CollegeFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: CountryFiltersInput
  or: [CountryFiltersInput]
  publishedAt: DateTimeFilterInput
  states: StateFiltersInput
  updatedAt: DateTimeFilterInput
}

input CountryInput {
  colleges: [ID]
  name: String
  publishedAt: DateTime
  states: [ID]
}

type CountryRelationResponseCollection {
  data: [CountryEntity!]!
}

type Course {
  banner(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  college_type: CollegeTypeEntityResponse
  colleges(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  course_levels(filters: CourseLevelFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CourseLevelRelationResponseCollection
  createdAt: DateTime
  duration: String
  fees: String
  isTopCourse: Boolean
  logo: UploadFileEntityResponse
  name: String
  navbars(filters: NavbarFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NavbarRelationResponseCollection
  news(filters: NewFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NewRelationResponseCollection
  publishedAt: DateTime
  specializations(filters: SpecializationFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): SpecializationRelationResponseCollection
  streams(filters: StreamFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StreamRelationResponseCollection
  updatedAt: DateTime
}

type CourseEntity {
  attributes: Course
  id: ID
}

type CourseEntityResponse {
  data: CourseEntity
}

type CourseEntityResponseCollection {
  data: [CourseEntity!]!
  meta: ResponseCollectionMeta!
}

input CourseFiltersInput {
  and: [CourseFiltersInput]
  college_type: CollegeTypeFiltersInput
  colleges: CollegeFiltersInput
  course_levels: CourseLevelFiltersInput
  createdAt: DateTimeFilterInput
  duration: StringFilterInput
  fees: StringFilterInput
  id: IDFilterInput
  isTopCourse: BooleanFilterInput
  name: StringFilterInput
  navbars: NavbarFiltersInput
  news: NewFiltersInput
  not: CourseFiltersInput
  or: [CourseFiltersInput]
  publishedAt: DateTimeFilterInput
  specializations: SpecializationFiltersInput
  streams: StreamFiltersInput
  updatedAt: DateTimeFilterInput
}

input CourseInput {
  banner: [ID]
  college_type: ID
  colleges: [ID]
  course_levels: [ID]
  duration: String
  fees: String
  isTopCourse: Boolean
  logo: ID
  name: String
  navbars: [ID]
  news: [ID]
  publishedAt: DateTime
  specializations: [ID]
  streams: [ID]
}

type CourseLevel {
  courses(filters: CourseFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CourseRelationResponseCollection
  createdAt: DateTime
  levelName: String
  publishedAt: DateTime
  updatedAt: DateTime
}

type CourseLevelEntity {
  attributes: CourseLevel
  id: ID
}

type CourseLevelEntityResponse {
  data: CourseLevelEntity
}

type CourseLevelEntityResponseCollection {
  data: [CourseLevelEntity!]!
  meta: ResponseCollectionMeta!
}

input CourseLevelFiltersInput {
  and: [CourseLevelFiltersInput]
  courses: CourseFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  levelName: StringFilterInput
  not: CourseLevelFiltersInput
  or: [CourseLevelFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input CourseLevelInput {
  courses: [ID]
  levelName: String
  publishedAt: DateTime
}

type CourseLevelRelationResponseCollection {
  data: [CourseLevelEntity!]!
}

type CourseRelationResponseCollection {
  data: [CourseEntity!]!
}

type CourseType {
  createdAt: DateTime
  publishedAt: DateTime
  type: String
  updatedAt: DateTime
}

type CourseTypeEntity {
  attributes: CourseType
  id: ID
}

type CourseTypeEntityResponse {
  data: CourseTypeEntity
}

type CourseTypeEntityResponseCollection {
  data: [CourseTypeEntity!]!
  meta: ResponseCollectionMeta!
}

input CourseTypeFiltersInput {
  and: [CourseTypeFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: CourseTypeFiltersInput
  or: [CourseTypeFiltersInput]
  publishedAt: DateTimeFilterInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input CourseTypeInput {
  publishedAt: DateTime
  type: String
}

type CourseTypeRelationResponseCollection {
  data: [CourseTypeEntity!]!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nei: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  nei: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

enum ENUM_CONTENTRELEASESRELEASEACTION_TYPE {
  publish
  unpublish
}

type Error {
  code: String!
  message: String
}

type Exam {
  applicationDate: ComponentCommonApplicationDate
  banner(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  createdAt: DateTime
  examDate: ComponentCommonDates
  examLevel(filters: ExamLevelFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ExamLevelRelationResponseCollection
  examMode: ExamModeEntityResponse
  isFeaturedExam: Boolean
  logo: UploadFileEntityResponse
  name: String
  navbar: NavbarEntityResponse
  news(filters: NewFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NewRelationResponseCollection
  publishedAt: DateTime
  resultDate: ComponentCommonResultDate
  streams(filters: StreamFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StreamRelationResponseCollection
  title: String
  updatedAt: DateTime
}

type ExamEntity {
  attributes: Exam
  id: ID
}

type ExamEntityResponse {
  data: ExamEntity
}

type ExamEntityResponseCollection {
  data: [ExamEntity!]!
  meta: ResponseCollectionMeta!
}

input ExamFiltersInput {
  and: [ExamFiltersInput]
  applicationDate: ComponentCommonApplicationDateFiltersInput
  createdAt: DateTimeFilterInput
  examDate: ComponentCommonDatesFiltersInput
  examLevel: ExamLevelFiltersInput
  examMode: ExamModeFiltersInput
  id: IDFilterInput
  isFeaturedExam: BooleanFilterInput
  name: StringFilterInput
  navbar: NavbarFiltersInput
  news: NewFiltersInput
  not: ExamFiltersInput
  or: [ExamFiltersInput]
  publishedAt: DateTimeFilterInput
  resultDate: ComponentCommonResultDateFiltersInput
  streams: StreamFiltersInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ExamInput {
  applicationDate: ComponentCommonApplicationDateInput
  banner: [ID]
  examDate: ComponentCommonDatesInput
  examLevel: [ID]
  examMode: ID
  isFeaturedExam: Boolean
  logo: ID
  name: String
  navbar: ID
  news: [ID]
  publishedAt: DateTime
  resultDate: ComponentCommonResultDateInput
  streams: [ID]
  title: String
}

type ExamLevel {
  createdAt: DateTime
  exams(filters: ExamFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ExamRelationResponseCollection
  name: String
  publishedAt: DateTime
  updatedAt: DateTime
}

type ExamLevelEntity {
  attributes: ExamLevel
  id: ID
}

type ExamLevelEntityResponse {
  data: ExamLevelEntity
}

type ExamLevelEntityResponseCollection {
  data: [ExamLevelEntity!]!
  meta: ResponseCollectionMeta!
}

input ExamLevelFiltersInput {
  and: [ExamLevelFiltersInput]
  createdAt: DateTimeFilterInput
  exams: ExamFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: ExamLevelFiltersInput
  or: [ExamLevelFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input ExamLevelInput {
  exams: [ID]
  name: String
  publishedAt: DateTime
}

type ExamLevelRelationResponseCollection {
  data: [ExamLevelEntity!]!
}

type ExamMode {
  createdAt: DateTime
  exams(filters: ExamFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ExamRelationResponseCollection
  mode: String
  publishedAt: DateTime
  updatedAt: DateTime
}

type ExamModeEntity {
  attributes: ExamMode
  id: ID
}

type ExamModeEntityResponse {
  data: ExamModeEntity
}

type ExamModeEntityResponseCollection {
  data: [ExamModeEntity!]!
  meta: ResponseCollectionMeta!
}

input ExamModeFiltersInput {
  and: [ExamModeFiltersInput]
  createdAt: DateTimeFilterInput
  exams: ExamFiltersInput
  id: IDFilterInput
  mode: StringFilterInput
  not: ExamModeFiltersInput
  or: [ExamModeFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input ExamModeInput {
  exams: [ID]
  mode: String
  publishedAt: DateTime
}

type ExamModeRelationResponseCollection {
  data: [ExamModeEntity!]!
}

type ExamRelationResponseCollection {
  data: [ExamEntity!]!
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  nei: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

union GenericMorph = City | College | CollegeType | ComponentCommonApplicationDate | ComponentCommonDates | ComponentCommonFaqS | ComponentCommonGallery | ComponentCommonResultDate | ComponentCommonTabData | ContentReleasesRelease | ContentReleasesReleaseAction | Country | Course | CourseLevel | CourseType | Exam | ExamLevel | ExamMode | I18NLocale | Navbar | New | Organization | RankingBody | Specialization | State | Stream | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input I18NLocaleInput {
  code: String
  name: String
}

type I18NLocaleRelationResponseCollection {
  data: [I18NLocaleEntity!]!
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  nei: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  nei: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  nei: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

input LongFilterInput {
  and: [Long]
  between: [Long]
  contains: Long
  containsi: Long
  endsWith: Long
  eq: Long
  eqi: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  ne: Long
  nei: Long
  not: LongFilterInput
  notContains: Long
  notContainsi: Long
  notIn: [Long]
  notNull: Boolean
  null: Boolean
  or: [Long]
  startsWith: Long
}

type Mutation {
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createCity(data: CityInput!): CityEntityResponse
  createCollege(data: CollegeInput!): CollegeEntityResponse
  createCollegeType(data: CollegeTypeInput!): CollegeTypeEntityResponse
  createContentReleasesRelease(data: ContentReleasesReleaseInput!): ContentReleasesReleaseEntityResponse
  createContentReleasesReleaseAction(data: ContentReleasesReleaseActionInput!): ContentReleasesReleaseActionEntityResponse
  createCountry(data: CountryInput!): CountryEntityResponse
  createCourse(data: CourseInput!): CourseEntityResponse
  createCourseLevel(data: CourseLevelInput!): CourseLevelEntityResponse
  createCourseType(data: CourseTypeInput!): CourseTypeEntityResponse
  createExam(data: ExamInput!): ExamEntityResponse
  createExamLevel(data: ExamLevelInput!): ExamLevelEntityResponse
  createExamMode(data: ExamModeInput!): ExamModeEntityResponse
  createNavbar(data: NavbarInput!): NavbarEntityResponse
  createNew(data: NewInput!): NewEntityResponse
  createOrganization(data: OrganizationInput!): OrganizationEntityResponse
  createRankingBody(data: RankingBodyInput!): RankingBodyEntityResponse
  createSpecialization(data: SpecializationInput!): SpecializationEntityResponse
  createState(data: StateInput!): StateEntityResponse
  createStream(data: StreamInput!): StreamEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteCity(id: ID!): CityEntityResponse
  deleteCollege(id: ID!): CollegeEntityResponse
  deleteCollegeType(id: ID!): CollegeTypeEntityResponse
  deleteContentReleasesRelease(id: ID!): ContentReleasesReleaseEntityResponse
  deleteContentReleasesReleaseAction(id: ID!): ContentReleasesReleaseActionEntityResponse
  deleteCountry(id: ID!): CountryEntityResponse
  deleteCourse(id: ID!): CourseEntityResponse
  deleteCourseLevel(id: ID!): CourseLevelEntityResponse
  deleteCourseType(id: ID!): CourseTypeEntityResponse
  deleteExam(id: ID!): ExamEntityResponse
  deleteExamLevel(id: ID!): ExamLevelEntityResponse
  deleteExamMode(id: ID!): ExamModeEntityResponse
  deleteNavbar(id: ID!): NavbarEntityResponse
  deleteNew(id: ID!): NewEntityResponse
  deleteOrganization(id: ID!): OrganizationEntityResponse
  deleteRankingBody(id: ID!): RankingBodyEntityResponse
  deleteSpecialization(id: ID!): SpecializationEntityResponse
  deleteState(id: ID!): StateEntityResponse
  deleteStream(id: ID!): StreamEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateCity(data: CityInput!, id: ID!): CityEntityResponse
  updateCollege(data: CollegeInput!, id: ID!): CollegeEntityResponse
  updateCollegeType(data: CollegeTypeInput!, id: ID!): CollegeTypeEntityResponse
  updateContentReleasesRelease(data: ContentReleasesReleaseInput!, id: ID!): ContentReleasesReleaseEntityResponse
  updateContentReleasesReleaseAction(data: ContentReleasesReleaseActionInput!, id: ID!): ContentReleasesReleaseActionEntityResponse
  updateCountry(data: CountryInput!, id: ID!): CountryEntityResponse
  updateCourse(data: CourseInput!, id: ID!): CourseEntityResponse
  updateCourseLevel(data: CourseLevelInput!, id: ID!): CourseLevelEntityResponse
  updateCourseType(data: CourseTypeInput!, id: ID!): CourseTypeEntityResponse
  updateExam(data: ExamInput!, id: ID!): ExamEntityResponse
  updateExamLevel(data: ExamLevelInput!, id: ID!): ExamLevelEntityResponse
  updateExamMode(data: ExamModeInput!, id: ID!): ExamModeEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateNavbar(data: NavbarInput!, id: ID!): NavbarEntityResponse
  updateNew(data: NewInput!, id: ID!): NewEntityResponse
  updateOrganization(data: OrganizationInput!, id: ID!): OrganizationEntityResponse
  updateRankingBody(data: RankingBodyInput!, id: ID!): RankingBodyEntityResponse
  updateSpecialization(data: SpecializationInput!, id: ID!): SpecializationEntityResponse
  updateState(data: StateInput!, id: ID!): StateEntityResponse
  updateStream(data: StreamInput!, id: ID!): StreamEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse

  """Update an existing role"""
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """Update an existing user"""
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Navbar {
  colleges(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  courses(filters: CourseFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CourseRelationResponseCollection
  createdAt: DateTime
  name: String
  publishedAt: DateTime
  updatedAt: DateTime
}

type NavbarEntity {
  attributes: Navbar
  id: ID
}

type NavbarEntityResponse {
  data: NavbarEntity
}

type NavbarEntityResponseCollection {
  data: [NavbarEntity!]!
  meta: ResponseCollectionMeta!
}

input NavbarFiltersInput {
  and: [NavbarFiltersInput]
  colleges: CollegeFiltersInput
  courses: CourseFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: NavbarFiltersInput
  or: [NavbarFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input NavbarInput {
  colleges: [ID]
  courses: [ID]
  name: String
  publishedAt: DateTime
}

type NavbarRelationResponseCollection {
  data: [NavbarEntity!]!
}

type New {
  colleges(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  content: String
  courses(filters: CourseFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CourseRelationResponseCollection
  createdAt: DateTime
  exams(filters: ExamFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ExamRelationResponseCollection
  excerpt: String
  featuredImage(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  publishedAt: DateTime
  title: String
  updatedAt: DateTime
}

type NewEntity {
  attributes: New
  id: ID
}

type NewEntityResponse {
  data: NewEntity
}

type NewEntityResponseCollection {
  data: [NewEntity!]!
  meta: ResponseCollectionMeta!
}

input NewFiltersInput {
  and: [NewFiltersInput]
  colleges: CollegeFiltersInput
  content: StringFilterInput
  courses: CourseFiltersInput
  createdAt: DateTimeFilterInput
  exams: ExamFiltersInput
  excerpt: StringFilterInput
  id: IDFilterInput
  not: NewFiltersInput
  or: [NewFiltersInput]
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input NewInput {
  colleges: [ID]
  content: String
  courses: [ID]
  exams: [ID]
  excerpt: String
  featuredImage: [ID]
  publishedAt: DateTime
  title: String
}

type NewRelationResponseCollection {
  data: [NewEntity!]!
}

type Organization {
  college: CollegeEntityResponse
  createdAt: DateTime
  description: String
  name: String
  publishedAt: DateTime
  updatedAt: DateTime
}

type OrganizationEntity {
  attributes: Organization
  id: ID
}

type OrganizationEntityResponse {
  data: OrganizationEntity
}

type OrganizationEntityResponseCollection {
  data: [OrganizationEntity!]!
  meta: ResponseCollectionMeta!
}

input OrganizationFiltersInput {
  and: [OrganizationFiltersInput]
  college: CollegeFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: OrganizationFiltersInput
  or: [OrganizationFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input OrganizationInput {
  college: ID
  description: String
  name: String
  publishedAt: DateTime
}

type OrganizationRelationResponseCollection {
  data: [OrganizationEntity!]!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  cities(filters: CityFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CityEntityResponseCollection
  city(id: ID): CityEntityResponse
  college(id: ID): CollegeEntityResponse
  collegeType(id: ID): CollegeTypeEntityResponse
  collegeTypes(filters: CollegeTypeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeTypeEntityResponseCollection
  colleges(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeEntityResponseCollection
  contentReleasesRelease(id: ID): ContentReleasesReleaseEntityResponse
  contentReleasesReleaseAction(id: ID): ContentReleasesReleaseActionEntityResponse
  contentReleasesReleaseActions(filters: ContentReleasesReleaseActionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ContentReleasesReleaseActionEntityResponseCollection
  contentReleasesReleases(filters: ContentReleasesReleaseFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ContentReleasesReleaseEntityResponseCollection
  countries(filters: CountryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CountryEntityResponseCollection
  country(id: ID): CountryEntityResponse
  course(id: ID): CourseEntityResponse
  courseLevel(id: ID): CourseLevelEntityResponse
  courseLevels(filters: CourseLevelFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CourseLevelEntityResponseCollection
  courseType(id: ID): CourseTypeEntityResponse
  courseTypes(filters: CourseTypeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CourseTypeEntityResponseCollection
  courses(filters: CourseFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CourseEntityResponseCollection
  exam(id: ID): ExamEntityResponse
  examLevel(id: ID): ExamLevelEntityResponse
  examLevels(filters: ExamLevelFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ExamLevelEntityResponseCollection
  examMode(id: ID): ExamModeEntityResponse
  examModes(filters: ExamModeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ExamModeEntityResponseCollection
  exams(filters: ExamFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ExamEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  me: UsersPermissionsMe
  navbar(id: ID): NavbarEntityResponse
  navbars(filters: NavbarFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NavbarEntityResponseCollection
  new(id: ID): NewEntityResponse
  news(filters: NewFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NewEntityResponseCollection
  organization(id: ID): OrganizationEntityResponse
  organizations(filters: OrganizationFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): OrganizationEntityResponseCollection
  rankingBodies(filters: RankingBodyFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): RankingBodyEntityResponseCollection
  rankingBody(id: ID): RankingBodyEntityResponse
  specialization(id: ID): SpecializationEntityResponse
  specializations(filters: SpecializationFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): SpecializationEntityResponseCollection
  state(id: ID): StateEntityResponse
  states(filters: StateFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StateEntityResponseCollection
  stream(id: ID): StreamEntityResponse
  streams(filters: StreamFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): StreamEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type RankingBody {
  college: CollegeEntityResponse
  createdAt: DateTime
  description: String
  name: String
  publishedAt: DateTime
  updatedAt: DateTime
}

type RankingBodyEntity {
  attributes: RankingBody
  id: ID
}

type RankingBodyEntityResponse {
  data: RankingBodyEntity
}

type RankingBodyEntityResponseCollection {
  data: [RankingBodyEntity!]!
  meta: ResponseCollectionMeta!
}

input RankingBodyFiltersInput {
  and: [RankingBodyFiltersInput]
  college: CollegeFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: RankingBodyFiltersInput
  or: [RankingBodyFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input RankingBodyInput {
  college: ID
  description: String
  name: String
  publishedAt: DateTime
}

type RankingBodyRelationResponseCollection {
  data: [RankingBodyEntity!]!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

type Specialization {
  courses(filters: CourseFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CourseRelationResponseCollection
  createdAt: DateTime
  name: String
  publishedAt: DateTime
  updatedAt: DateTime
}

type SpecializationEntity {
  attributes: Specialization
  id: ID
}

type SpecializationEntityResponse {
  data: SpecializationEntity
}

type SpecializationEntityResponseCollection {
  data: [SpecializationEntity!]!
  meta: ResponseCollectionMeta!
}

input SpecializationFiltersInput {
  and: [SpecializationFiltersInput]
  courses: CourseFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: SpecializationFiltersInput
  or: [SpecializationFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input SpecializationInput {
  courses: [ID]
  name: String
  publishedAt: DateTime
}

type SpecializationRelationResponseCollection {
  data: [SpecializationEntity!]!
}

type State {
  cities(filters: CityFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CityRelationResponseCollection
  colleges(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  country: CountryEntityResponse
  createdAt: DateTime
  logo: UploadFileEntityResponse
  name: String
  publishedAt: DateTime
  updatedAt: DateTime
}

type StateEntity {
  attributes: State
  id: ID
}

type StateEntityResponse {
  data: StateEntity
}

type StateEntityResponseCollection {
  data: [StateEntity!]!
  meta: ResponseCollectionMeta!
}

input StateFiltersInput {
  and: [StateFiltersInput]
  cities: CityFiltersInput
  colleges: CollegeFiltersInput
  country: CountryFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: StateFiltersInput
  or: [StateFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input StateInput {
  cities: [ID]
  colleges: [ID]
  country: ID
  logo: ID
  name: String
  publishedAt: DateTime
}

type StateRelationResponseCollection {
  data: [StateEntity!]!
}

type Stream {
  colleges_description: String
  courses(filters: CourseFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CourseRelationResponseCollection
  courses_description: String
  createdAt: DateTime
  description: String
  exams(filters: ExamFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ExamRelationResponseCollection
  logo: UploadFileEntityResponse
  publishedAt: DateTime
  streamName: String
  streams(filters: CollegeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CollegeRelationResponseCollection
  updatedAt: DateTime
}

type StreamEntity {
  attributes: Stream
  id: ID
}

type StreamEntityResponse {
  data: StreamEntity
}

type StreamEntityResponseCollection {
  data: [StreamEntity!]!
  meta: ResponseCollectionMeta!
}

input StreamFiltersInput {
  and: [StreamFiltersInput]
  colleges_description: StringFilterInput
  courses: CourseFiltersInput
  courses_description: StringFilterInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  exams: ExamFiltersInput
  id: IDFilterInput
  not: StreamFiltersInput
  or: [StreamFiltersInput]
  publishedAt: DateTimeFilterInput
  streamName: StringFilterInput
  streams: CollegeFiltersInput
  updatedAt: DateTimeFilterInput
}

input StreamInput {
  colleges_description: String
  courses: [ID]
  courses_description: String
  description: String
  exams: [ID]
  logo: ID
  publishedAt: DateTime
  streamName: String
  streams: [ID]
}

type StreamRelationResponseCollection {
  data: [StreamEntity!]!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nei: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

"""A time string with format HH:mm:ss.SSS"""
scalar Time

input TimeFilterInput {
  and: [Time]
  between: [Time]
  contains: Time
  containsi: Time
  endsWith: Time
  eq: Time
  eqi: Time
  gt: Time
  gte: Time
  in: [Time]
  lt: Time
  lte: Time
  ne: Time
  nei: Time
  not: TimeFilterInput
  notContains: Time
  notContainsi: Time
  notIn: [Time]
  notNull: Boolean
  null: Boolean
  or: [Time]
  startsWith: Time
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionEntityResponse {
  data: UsersPermissionsPermissionEntity
}

type UsersPermissionsPermissionEntityResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsPermissionInput {
  action: String
  role: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsRoleRelationResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}
